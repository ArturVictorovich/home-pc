"use strict";



const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");


class Workout{
  date = new Date()
  // –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
  id = (Date.now() + "").slice(-10)
  constructor(coords, distance, duration){
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDescription() {
    const months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} ${
      months[this.date.getMonth()]
    } ${this.date.getDate()}
    `
  }
}

class Running extends Workout {
  type = "running"
  constructor(coords, distance, duration, cadence) {
    super(coords, distance, duration);
    this.cadence = cadence;
    this.culcPace();
    this._setDescription()
  }
  culcPace() {
    this.pace = this.duration / this.distance
    return this.pace
  }
 
}

class Cycling extends Workout {
  type = "cycling"
  constructor(coords, distance, duration, elevation) {
    super(coords, distance, duration);
    this.elevation = elevation;
    this.culcSpeed()
    this._setDescription()
  }
  culcSpeed() {
    this.speed = this.distance / (this.duration / 60)
    return this.speed
  }
}



class App{
  _workouts = []
  _map;
  _mapEve;
  constructor(){


    // –∑–∞–ø—É—Å–∫ —Ñ—É–∫–Ω—Ü–∏–∏ –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–∞—Ä—Ç—ã
    this._getPosition();
    // –æ–±–Ω—É–ª–µ–Ω–∏–µ –æ–∫–æ–Ω –∏–Ω–ø—É—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–æ–∂–∞—Ç–∏—è enter
    form.addEventListener("submit", this._newWorkout.bind(this));
    // –°–º–µ–Ω–∞ –∏–Ω–ø—É—Ç–∞ —Å –±–µ–≥–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥
    inputType.addEventListener("change", this._tooglleField)
    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this))
       // –ü–æ–ª—É–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
    this._getLocalStorage()

  }
  //–∑–∞—É–ø—É—Å–∫–µ—Ç –∫–∞—Ä—Ç—É API
  _getPosition(){if(navigator.geolocation){
    navigator.geolocation.getCurrentPosition(
      // –ø—Ä–∏–Ω–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—É 
      this._loadMap.bind(this),
      function(){alert("–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –Ω–∞ –∑–∞–ø—Ä–æ—Å –≥–µ–æ –¥–∞–Ω–Ω—ã—Ö")}
    )
    }}
    //–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞—Ä—Ç—É API 
  _loadMap(possition){
    const {latitude} = possition.coords
    const {longitude} = possition.coords
    const coords = [latitude, longitude]
    
      this._map = L.map('map').setView(coords, 13);
      L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(this._map);

      this._map.on("click", this._showForm.bind(this))
      this._workouts.forEach(work => {
        this._renderingMarke(work)
      })
    
  }
  //–ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–∫–Ω–æ
  _showForm(mapE){
    this._mapEve = mapE
    form.classList.remove("hidden")
    inputDistance.focus()
  }
  //–ú–µ–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∏–Ω–ø—É—Ç–æ–≤
  _tooglleField(){
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden")
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden")
}

//–û–±–Ω—É–ª—è–µ—Ç –ø–æ–ª—è –∏–Ω–ø—É—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ enter –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
  _newWorkout(e){
    e.preventDefault()

    const validAllPositiv = (...inputs) =>
      inputs.every(inp => inp > 0)
    const  validInput = (...inputs) => inputs.every(inp => Number.isFinite(inp))
//–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const {lat, lng} = this._mapEve.latlng
    let workout;
    


    if (type ==="running") {
      const cadence = +inputCadence.value

      if(
        !validInput(distance, duration, cadence) ||
        !validAllPositiv(distance, duration, cadence)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ") 
      }
        workout = new Running([lat, lng], distance, duration, cadence)
    }

    if (type ==="cycling") {
      const elevation = +inputElevation.value
      if(
        !validInput(distance, duration, elevation) ||
        !validAllPositiv(distance, duration)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ")
      }
      workout = new Cycling([lat, lng], distance, duration, elevation)
    }

    this._workouts.push(workout)
    console.log(this._workouts)
    //–†–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤–∫–∏
    this._renderingMarke(workout)
    this._renderWorkout(workout)
    this._hideForm()

    this._setLoalStorage()
}
_renderingMarke(workout) {
  L.marker(workout.coords,{
      opacity: 1,
    }).addTo(this._map)
      .bindPopup(
    L.popup({
      className: "popupWindow",
      closeButton: true,
      autoClose: false,
      closeOnClick: false,
    })
  )
    .setPopupContent(`${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"} ${workout.description} `)
    .openPopup() 
}
  // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É 

_hideForm() {
inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value = "";
  form.classList.add("hidden");
}
_renderWorkout(workout) {
  let html = 
  `
  <li class="workout workout--${workout.type}" data-id="${workout.id}">
    <h2 class="workout__title">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>
  `
  if(workout.type === "running") {
    html += 
    `
    <div class="workout__details">
    <span class="workout__icon">‚ö°Ô∏è</span>
    <span class="workout__value">${workout.pace.toFixed(1)}</span>
    <span class="workout__unit">–º–∏–Ω/–∫–º</span>
  </div>
  <div class="workout__details">
    <span class="workout__icon">ü¶∂üèº</span>
    <span class="workout__value">${workout.cadence}</span>
    <span class="workout__unit">—à–∞–≥</span>
  </div>
</li>`;
    }

    if(workout.type === "cycling") {
      html += 
      `
      <div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.speed.toFixed(1)}</span>
      <span class="workout__unit">–∫–º/—á–∞—Å</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚õ∞</span>
      <span class="workout__value">${workout.elevation}</span>
      <span class="workout__unit">–º</span>
    </div>
    </li>
    
    
        `;
    
        }
    form.insertAdjacentHTML("afterend", html)
  }
  _moveToPopup(e) {
    const workoutEl = e.target.closest(".workout")
    if (!workoutEl) return

    const workout = this._workouts.find((work) => work.id === workoutEl.dataset.id)
    this._map.setView(
      workout.coords, 13, {
        animate: true,
        pan: {duration: 1},
      }
    )
  }
// –ü–æ–ª—É–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
  _getLocalStorage() {
  const data = JSON.parse(localStorage.getItem("workouts")) 

  if(!data) return

  this._workouts = data
  this._workouts.forEach(work => {
    this._renderWorkout(work)
  })
  }

  //–•—Ä–∞–Ω–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–µ—Ä–≤–æ–∫–∞—Ö –≤ –±—Ä–∞—É–∑—Ä–µ
  _setLoalStorage() {
    localStorage.setItem("workouts", JSON.stringify(this._workouts))
  }
  reset() {
    localStorage.removeItem("workouts")
  }
}


//–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 
const app = new App()
//–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–µ—Ç–æ–¥ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∫–ª–∞—Å—Å–∞


